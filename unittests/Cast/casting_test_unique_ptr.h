/// This file is automatically generated by 
/// scripts/gen_graph_cast_tests.py graph_type_info.yaml .

/// DONOT edit this file manually



    // BEGIN OF object (de)allocation
    unique_ptr<GlobalBlockNode> globalBlockNode = unique_ptr<GlobalBlockNode>();
    unique_ptr<ICFGNode> iCFGNode = unique_ptr<ICFGNode>();
    unique_ptr<IntraBlockNode> intraBlockNode = unique_ptr<IntraBlockNode>();
    unique_ptr<InterBlockNode> interBlockNode = unique_ptr<InterBlockNode>();
    unique_ptr<FunEntryBlockNode> funEntryBlockNode = unique_ptr<FunEntryBlockNode>();
    unique_ptr<FunExitBlockNode> funExitBlockNode = unique_ptr<FunExitBlockNode>();
    unique_ptr<CallBlockNode> callBlockNode = unique_ptr<CallBlockNode>();
    unique_ptr<RetBlockNode> retBlockNode = unique_ptr<RetBlockNode>();
    unique_ptr<ValPN> valPN = unique_ptr<ValPN>();
    unique_ptr<GepValPN> gepValPN = unique_ptr<GepValPN>();
    unique_ptr<DummyValPN> dummyValPN = unique_ptr<DummyValPN>();
    unique_ptr<ObjPN> objPN = unique_ptr<ObjPN>();
    unique_ptr<GepObjPN> gepObjPN = unique_ptr<GepObjPN>();
    unique_ptr<CloneGepObjPN> cloneGepObjPN = unique_ptr<CloneGepObjPN>();
    unique_ptr<FIObjPN> fIObjPN = unique_ptr<FIObjPN>();
    unique_ptr<CloneFIObjPN> cloneFIObjPN = unique_ptr<CloneFIObjPN>();
    unique_ptr<DummyObjPN> dummyObjPN = unique_ptr<DummyObjPN>();
    unique_ptr<CloneDummyObjPN> cloneDummyObjPN = unique_ptr<CloneDummyObjPN>();
    unique_ptr<RetPN> retPN = unique_ptr<RetPN>();
    unique_ptr<VarArgPN> varArgPN = unique_ptr<VarArgPN>();
    unique_ptr<StmtVFGNode> stmtVFGNode = unique_ptr<StmtVFGNode>();
    unique_ptr<VFGNode> vFGNode = unique_ptr<VFGNode>();
    unique_ptr<LoadVFGNode> loadVFGNode = unique_ptr<LoadVFGNode>();
    unique_ptr<StoreVFGNode> storeVFGNode = unique_ptr<StoreVFGNode>();
    unique_ptr<CopyVFGNode> copyVFGNode = unique_ptr<CopyVFGNode>();
    unique_ptr<GepVFGNode> gepVFGNode = unique_ptr<GepVFGNode>();
    unique_ptr<AddrVFGNode> addrVFGNode = unique_ptr<AddrVFGNode>();
    unique_ptr<CmpVFGNode> cmpVFGNode = unique_ptr<CmpVFGNode>();
    unique_ptr<BinaryOPVFGNode> binaryOPVFGNode = unique_ptr<BinaryOPVFGNode>();
    unique_ptr<UnaryOPVFGNode> unaryOPVFGNode = unique_ptr<UnaryOPVFGNode>();
    unique_ptr<PHIVFGNode> pHIVFGNode = unique_ptr<PHIVFGNode>();
    unique_ptr<IntraPHIVFGNode> intraPHIVFGNode = unique_ptr<IntraPHIVFGNode>();
    unique_ptr<InterPHIVFGNode> interPHIVFGNode = unique_ptr<InterPHIVFGNode>();
    unique_ptr<ArgumentVFGNode> argumentVFGNode = unique_ptr<ArgumentVFGNode>();
    unique_ptr<ActualParmVFGNode> actualParmVFGNode = unique_ptr<ActualParmVFGNode>();
    unique_ptr<FormalParmVFGNode> formalParmVFGNode = unique_ptr<FormalParmVFGNode>();
    unique_ptr<ActualRetVFGNode> actualRetVFGNode = unique_ptr<ActualRetVFGNode>();
    unique_ptr<FormalRetVFGNode> formalRetVFGNode = unique_ptr<FormalRetVFGNode>();
    unique_ptr<NullPtrVFGNode> nullPtrVFGNode = unique_ptr<NullPtrVFGNode>();
    unique_ptr<FormalINSVFGNode> formalINSVFGNode = unique_ptr<FormalINSVFGNode>();
    unique_ptr<MRSVFGNode> mRSVFGNode = unique_ptr<MRSVFGNode>();
    unique_ptr<FormalOUTSVFGNode> formalOUTSVFGNode = unique_ptr<FormalOUTSVFGNode>();
    unique_ptr<ActualINSVFGNode> actualINSVFGNode = unique_ptr<ActualINSVFGNode>();
    unique_ptr<ActualOUTSVFGNode> actualOUTSVFGNode = unique_ptr<ActualOUTSVFGNode>();
    unique_ptr<MSSAPHISVFGNode> mSSAPHISVFGNode = unique_ptr<MSSAPHISVFGNode>();
    unique_ptr<IntraMSSAPHISVFGNode> intraMSSAPHISVFGNode = unique_ptr<IntraMSSAPHISVFGNode>();
    unique_ptr<InterMSSAPHISVFGNode> interMSSAPHISVFGNode = unique_ptr<InterMSSAPHISVFGNode>();
    unique_ptr<AddrCGEdge> addrCGEdge = unique_ptr<AddrCGEdge>();
    unique_ptr<ConstraintEdge> constraintEdge = unique_ptr<ConstraintEdge>();
    unique_ptr<CopyCGEdge> copyCGEdge = unique_ptr<CopyCGEdge>();
    unique_ptr<StoreCGEdge> storeCGEdge = unique_ptr<StoreCGEdge>();
    unique_ptr<LoadCGEdge> loadCGEdge = unique_ptr<LoadCGEdge>();
    unique_ptr<GepCGEdge> gepCGEdge = unique_ptr<GepCGEdge>();
    unique_ptr<NormalGepCGEdge> normalGepCGEdge = unique_ptr<NormalGepCGEdge>();
    unique_ptr<VariantGepCGEdge> variantGepCGEdge = unique_ptr<VariantGepCGEdge>();
    unique_ptr<IntraCFGEdge> intraCFGEdge = unique_ptr<IntraCFGEdge>();
    unique_ptr<ICFGEdge> iCFGEdge = unique_ptr<ICFGEdge>();
    unique_ptr<CallCFGEdge> callCFGEdge = unique_ptr<CallCFGEdge>();
    unique_ptr<RetCFGEdge> retCFGEdge = unique_ptr<RetCFGEdge>();
    unique_ptr<CopyPE> copyPE = unique_ptr<CopyPE>();
    unique_ptr<PAGEdge> pAGEdge = unique_ptr<PAGEdge>();
    unique_ptr<CmpPE> cmpPE = unique_ptr<CmpPE>();
    unique_ptr<BinaryOPPE> binaryOPPE = unique_ptr<BinaryOPPE>();
    unique_ptr<UnaryOPPE> unaryOPPE = unique_ptr<UnaryOPPE>();
    unique_ptr<StorePE> storePE = unique_ptr<StorePE>();
    unique_ptr<LoadPE> loadPE = unique_ptr<LoadPE>();
    unique_ptr<GepPE> gepPE = unique_ptr<GepPE>();
    unique_ptr<NormalGepPE> normalGepPE = unique_ptr<NormalGepPE>();
    unique_ptr<VariantGepPE> variantGepPE = unique_ptr<VariantGepPE>();
    unique_ptr<CallPE> callPE = unique_ptr<CallPE>();
    unique_ptr<TDForkPE> tDForkPE = unique_ptr<TDForkPE>();
    unique_ptr<RetPE> retPE = unique_ptr<RetPE>();
    unique_ptr<TDJoinPE> tDJoinPE = unique_ptr<TDJoinPE>();
    unique_ptr<DirectSVFGEdge> directSVFGEdge = unique_ptr<DirectSVFGEdge>();
    unique_ptr<VFGEdge> vFGEdge = unique_ptr<VFGEdge>();
    unique_ptr<IntraDirSVFGEdge> intraDirSVFGEdge = unique_ptr<IntraDirSVFGEdge>();
    unique_ptr<CallDirSVFGEdge> callDirSVFGEdge = unique_ptr<CallDirSVFGEdge>();
    unique_ptr<RetDirSVFGEdge> retDirSVFGEdge = unique_ptr<RetDirSVFGEdge>();
    unique_ptr<IndirectSVFGEdge> indirectSVFGEdge = unique_ptr<IndirectSVFGEdge>();
    unique_ptr<IntraIndSVFGEdge> intraIndSVFGEdge = unique_ptr<IntraIndSVFGEdge>();
    unique_ptr<CallIndSVFGEdge> callIndSVFGEdge = unique_ptr<CallIndSVFGEdge>();
    unique_ptr<RetIndSVFGEdge> retIndSVFGEdge = unique_ptr<RetIndSVFGEdge>();
    unique_ptr<ThreadMHPIndSVFGEdge> threadMHPIndSVFGEdge = unique_ptr<ThreadMHPIndSVFGEdge>();
    // END OF object (de)allocation

    // BEGIN OF cast testing
    ASSERT_TRUE(llvm::isa<ICFGNode>(globalBlockNode));
    ASSERT_NE(llvm::dyn_cast<ICFGNode>(globalBlockNode), nullptr);
    ASSERT_FALSE(llvm::isa<GlobalBlockNode>(iCFGNode));
    ASSERT_EQ(llvm::dyn_cast<GlobalBlockNode>(iCFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<ICFGNode>(intraBlockNode));
    ASSERT_NE(llvm::dyn_cast<ICFGNode>(intraBlockNode), nullptr);
    ASSERT_FALSE(llvm::isa<IntraBlockNode>(iCFGNode));
    ASSERT_EQ(llvm::dyn_cast<IntraBlockNode>(iCFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<ICFGNode>(interBlockNode));
    ASSERT_NE(llvm::dyn_cast<ICFGNode>(interBlockNode), nullptr);
    ASSERT_FALSE(llvm::isa<InterBlockNode>(iCFGNode));
    ASSERT_EQ(llvm::dyn_cast<InterBlockNode>(iCFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<InterBlockNode>(funEntryBlockNode));
    ASSERT_NE(llvm::dyn_cast<InterBlockNode>(funEntryBlockNode), nullptr);
    ASSERT_FALSE(llvm::isa<FunEntryBlockNode>(interBlockNode));
    ASSERT_EQ(llvm::dyn_cast<FunEntryBlockNode>(interBlockNode), nullptr);
    ASSERT_TRUE(llvm::isa<InterBlockNode>(funExitBlockNode));
    ASSERT_NE(llvm::dyn_cast<InterBlockNode>(funExitBlockNode), nullptr);
    ASSERT_FALSE(llvm::isa<FunExitBlockNode>(interBlockNode));
    ASSERT_EQ(llvm::dyn_cast<FunExitBlockNode>(interBlockNode), nullptr);
    ASSERT_TRUE(llvm::isa<InterBlockNode>(callBlockNode));
    ASSERT_NE(llvm::dyn_cast<InterBlockNode>(callBlockNode), nullptr);
    ASSERT_FALSE(llvm::isa<CallBlockNode>(interBlockNode));
    ASSERT_EQ(llvm::dyn_cast<CallBlockNode>(interBlockNode), nullptr);
    ASSERT_TRUE(llvm::isa<InterBlockNode>(retBlockNode));
    ASSERT_NE(llvm::dyn_cast<InterBlockNode>(retBlockNode), nullptr);
    ASSERT_FALSE(llvm::isa<RetBlockNode>(interBlockNode));
    ASSERT_EQ(llvm::dyn_cast<RetBlockNode>(interBlockNode), nullptr);
    ASSERT_TRUE(llvm::isa<PAGNode>(valPN));
    ASSERT_NE(llvm::dyn_cast<PAGNode>(valPN), nullptr);
    ASSERT_TRUE(llvm::isa<ValPN>(gepValPN));
    ASSERT_NE(llvm::dyn_cast<ValPN>(gepValPN), nullptr);
    ASSERT_FALSE(llvm::isa<GepValPN>(valPN));
    ASSERT_EQ(llvm::dyn_cast<GepValPN>(valPN), nullptr);
    ASSERT_TRUE(llvm::isa<ValPN>(dummyValPN));
    ASSERT_NE(llvm::dyn_cast<ValPN>(dummyValPN), nullptr);
    ASSERT_FALSE(llvm::isa<DummyValPN>(valPN));
    ASSERT_EQ(llvm::dyn_cast<DummyValPN>(valPN), nullptr);
    ASSERT_TRUE(llvm::isa<PAGNode>(objPN));
    ASSERT_NE(llvm::dyn_cast<PAGNode>(objPN), nullptr);
    ASSERT_TRUE(llvm::isa<ObjPN>(gepObjPN));
    ASSERT_NE(llvm::dyn_cast<ObjPN>(gepObjPN), nullptr);
    ASSERT_FALSE(llvm::isa<GepObjPN>(objPN));
    ASSERT_EQ(llvm::dyn_cast<GepObjPN>(objPN), nullptr);
    ASSERT_TRUE(llvm::isa<GepObjPN>(cloneGepObjPN));
    ASSERT_NE(llvm::dyn_cast<GepObjPN>(cloneGepObjPN), nullptr);
    ASSERT_FALSE(llvm::isa<CloneGepObjPN>(gepObjPN));
    ASSERT_EQ(llvm::dyn_cast<CloneGepObjPN>(gepObjPN), nullptr);
    ASSERT_TRUE(llvm::isa<ObjPN>(fIObjPN));
    ASSERT_NE(llvm::dyn_cast<ObjPN>(fIObjPN), nullptr);
    ASSERT_FALSE(llvm::isa<FIObjPN>(objPN));
    ASSERT_EQ(llvm::dyn_cast<FIObjPN>(objPN), nullptr);
    ASSERT_TRUE(llvm::isa<FIObjPN>(cloneFIObjPN));
    ASSERT_NE(llvm::dyn_cast<FIObjPN>(cloneFIObjPN), nullptr);
    ASSERT_FALSE(llvm::isa<CloneFIObjPN>(fIObjPN));
    ASSERT_EQ(llvm::dyn_cast<CloneFIObjPN>(fIObjPN), nullptr);
    ASSERT_TRUE(llvm::isa<ObjPN>(dummyObjPN));
    ASSERT_NE(llvm::dyn_cast<ObjPN>(dummyObjPN), nullptr);
    ASSERT_FALSE(llvm::isa<DummyObjPN>(objPN));
    ASSERT_EQ(llvm::dyn_cast<DummyObjPN>(objPN), nullptr);
    ASSERT_TRUE(llvm::isa<DummyObjPN>(cloneDummyObjPN));
    ASSERT_NE(llvm::dyn_cast<DummyObjPN>(cloneDummyObjPN), nullptr);
    ASSERT_FALSE(llvm::isa<CloneDummyObjPN>(dummyObjPN));
    ASSERT_EQ(llvm::dyn_cast<CloneDummyObjPN>(dummyObjPN), nullptr);
    ASSERT_TRUE(llvm::isa<PAGNode>(retPN));
    ASSERT_NE(llvm::dyn_cast<PAGNode>(retPN), nullptr);
    ASSERT_TRUE(llvm::isa<PAGNode>(varArgPN));
    ASSERT_NE(llvm::dyn_cast<PAGNode>(varArgPN), nullptr);
    ASSERT_TRUE(llvm::isa<VFGNode>(stmtVFGNode));
    ASSERT_NE(llvm::dyn_cast<VFGNode>(stmtVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<StmtVFGNode>(vFGNode));
    ASSERT_EQ(llvm::dyn_cast<StmtVFGNode>(vFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<StmtVFGNode>(loadVFGNode));
    ASSERT_NE(llvm::dyn_cast<StmtVFGNode>(loadVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<LoadVFGNode>(stmtVFGNode));
    ASSERT_EQ(llvm::dyn_cast<LoadVFGNode>(stmtVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<StmtVFGNode>(storeVFGNode));
    ASSERT_NE(llvm::dyn_cast<StmtVFGNode>(storeVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<StoreVFGNode>(stmtVFGNode));
    ASSERT_EQ(llvm::dyn_cast<StoreVFGNode>(stmtVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<StmtVFGNode>(copyVFGNode));
    ASSERT_NE(llvm::dyn_cast<StmtVFGNode>(copyVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<CopyVFGNode>(stmtVFGNode));
    ASSERT_EQ(llvm::dyn_cast<CopyVFGNode>(stmtVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<StmtVFGNode>(gepVFGNode));
    ASSERT_NE(llvm::dyn_cast<StmtVFGNode>(gepVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<GepVFGNode>(stmtVFGNode));
    ASSERT_EQ(llvm::dyn_cast<GepVFGNode>(stmtVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<StmtVFGNode>(addrVFGNode));
    ASSERT_NE(llvm::dyn_cast<StmtVFGNode>(addrVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<AddrVFGNode>(stmtVFGNode));
    ASSERT_EQ(llvm::dyn_cast<AddrVFGNode>(stmtVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<VFGNode>(cmpVFGNode));
    ASSERT_NE(llvm::dyn_cast<VFGNode>(cmpVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<CmpVFGNode>(vFGNode));
    ASSERT_EQ(llvm::dyn_cast<CmpVFGNode>(vFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<VFGNode>(binaryOPVFGNode));
    ASSERT_NE(llvm::dyn_cast<VFGNode>(binaryOPVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<BinaryOPVFGNode>(vFGNode));
    ASSERT_EQ(llvm::dyn_cast<BinaryOPVFGNode>(vFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<VFGNode>(unaryOPVFGNode));
    ASSERT_NE(llvm::dyn_cast<VFGNode>(unaryOPVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<UnaryOPVFGNode>(vFGNode));
    ASSERT_EQ(llvm::dyn_cast<UnaryOPVFGNode>(vFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<VFGNode>(pHIVFGNode));
    ASSERT_NE(llvm::dyn_cast<VFGNode>(pHIVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<PHIVFGNode>(vFGNode));
    ASSERT_EQ(llvm::dyn_cast<PHIVFGNode>(vFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<PHIVFGNode>(intraPHIVFGNode));
    ASSERT_NE(llvm::dyn_cast<PHIVFGNode>(intraPHIVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<IntraPHIVFGNode>(pHIVFGNode));
    ASSERT_EQ(llvm::dyn_cast<IntraPHIVFGNode>(pHIVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<PHIVFGNode>(interPHIVFGNode));
    ASSERT_NE(llvm::dyn_cast<PHIVFGNode>(interPHIVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<InterPHIVFGNode>(pHIVFGNode));
    ASSERT_EQ(llvm::dyn_cast<InterPHIVFGNode>(pHIVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<VFGNode>(argumentVFGNode));
    ASSERT_NE(llvm::dyn_cast<VFGNode>(argumentVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<ArgumentVFGNode>(vFGNode));
    ASSERT_EQ(llvm::dyn_cast<ArgumentVFGNode>(vFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<ArgumentVFGNode>(actualParmVFGNode));
    ASSERT_NE(llvm::dyn_cast<ArgumentVFGNode>(actualParmVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<ActualParmVFGNode>(argumentVFGNode));
    ASSERT_EQ(llvm::dyn_cast<ActualParmVFGNode>(argumentVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<ArgumentVFGNode>(formalParmVFGNode));
    ASSERT_NE(llvm::dyn_cast<ArgumentVFGNode>(formalParmVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<FormalParmVFGNode>(argumentVFGNode));
    ASSERT_EQ(llvm::dyn_cast<FormalParmVFGNode>(argumentVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<ArgumentVFGNode>(actualRetVFGNode));
    ASSERT_NE(llvm::dyn_cast<ArgumentVFGNode>(actualRetVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<ActualRetVFGNode>(argumentVFGNode));
    ASSERT_EQ(llvm::dyn_cast<ActualRetVFGNode>(argumentVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<ArgumentVFGNode>(formalRetVFGNode));
    ASSERT_NE(llvm::dyn_cast<ArgumentVFGNode>(formalRetVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<FormalRetVFGNode>(argumentVFGNode));
    ASSERT_EQ(llvm::dyn_cast<FormalRetVFGNode>(argumentVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<VFGNode>(nullPtrVFGNode));
    ASSERT_NE(llvm::dyn_cast<VFGNode>(nullPtrVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<NullPtrVFGNode>(vFGNode));
    ASSERT_EQ(llvm::dyn_cast<NullPtrVFGNode>(vFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<MRSVFGNode>(formalINSVFGNode));
    ASSERT_NE(llvm::dyn_cast<MRSVFGNode>(formalINSVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<FormalINSVFGNode>(mRSVFGNode));
    ASSERT_EQ(llvm::dyn_cast<FormalINSVFGNode>(mRSVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<MRSVFGNode>(formalOUTSVFGNode));
    ASSERT_NE(llvm::dyn_cast<MRSVFGNode>(formalOUTSVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<FormalOUTSVFGNode>(mRSVFGNode));
    ASSERT_EQ(llvm::dyn_cast<FormalOUTSVFGNode>(mRSVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<MRSVFGNode>(actualINSVFGNode));
    ASSERT_NE(llvm::dyn_cast<MRSVFGNode>(actualINSVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<ActualINSVFGNode>(mRSVFGNode));
    ASSERT_EQ(llvm::dyn_cast<ActualINSVFGNode>(mRSVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<MRSVFGNode>(actualOUTSVFGNode));
    ASSERT_NE(llvm::dyn_cast<MRSVFGNode>(actualOUTSVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<ActualOUTSVFGNode>(mRSVFGNode));
    ASSERT_EQ(llvm::dyn_cast<ActualOUTSVFGNode>(mRSVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<MRSVFGNode>(mSSAPHISVFGNode));
    ASSERT_NE(llvm::dyn_cast<MRSVFGNode>(mSSAPHISVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<MSSAPHISVFGNode>(mRSVFGNode));
    ASSERT_EQ(llvm::dyn_cast<MSSAPHISVFGNode>(mRSVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<MSSAPHISVFGNode>(intraMSSAPHISVFGNode));
    ASSERT_NE(llvm::dyn_cast<MSSAPHISVFGNode>(intraMSSAPHISVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<IntraMSSAPHISVFGNode>(mSSAPHISVFGNode));
    ASSERT_EQ(llvm::dyn_cast<IntraMSSAPHISVFGNode>(mSSAPHISVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<MSSAPHISVFGNode>(interMSSAPHISVFGNode));
    ASSERT_NE(llvm::dyn_cast<MSSAPHISVFGNode>(interMSSAPHISVFGNode), nullptr);
    ASSERT_FALSE(llvm::isa<InterMSSAPHISVFGNode>(mSSAPHISVFGNode));
    ASSERT_EQ(llvm::dyn_cast<InterMSSAPHISVFGNode>(mSSAPHISVFGNode), nullptr);
    ASSERT_TRUE(llvm::isa<ConstraintEdge>(addrCGEdge));
    ASSERT_NE(llvm::dyn_cast<ConstraintEdge>(addrCGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<AddrCGEdge>(constraintEdge));
    ASSERT_EQ(llvm::dyn_cast<AddrCGEdge>(constraintEdge), nullptr);
    ASSERT_TRUE(llvm::isa<ConstraintEdge>(copyCGEdge));
    ASSERT_NE(llvm::dyn_cast<ConstraintEdge>(copyCGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<CopyCGEdge>(constraintEdge));
    ASSERT_EQ(llvm::dyn_cast<CopyCGEdge>(constraintEdge), nullptr);
    ASSERT_TRUE(llvm::isa<ConstraintEdge>(storeCGEdge));
    ASSERT_NE(llvm::dyn_cast<ConstraintEdge>(storeCGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<StoreCGEdge>(constraintEdge));
    ASSERT_EQ(llvm::dyn_cast<StoreCGEdge>(constraintEdge), nullptr);
    ASSERT_TRUE(llvm::isa<ConstraintEdge>(loadCGEdge));
    ASSERT_NE(llvm::dyn_cast<ConstraintEdge>(loadCGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<LoadCGEdge>(constraintEdge));
    ASSERT_EQ(llvm::dyn_cast<LoadCGEdge>(constraintEdge), nullptr);
    ASSERT_TRUE(llvm::isa<ConstraintEdge>(gepCGEdge));
    ASSERT_NE(llvm::dyn_cast<ConstraintEdge>(gepCGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<GepCGEdge>(constraintEdge));
    ASSERT_EQ(llvm::dyn_cast<GepCGEdge>(constraintEdge), nullptr);
    ASSERT_TRUE(llvm::isa<GepCGEdge>(normalGepCGEdge));
    ASSERT_NE(llvm::dyn_cast<GepCGEdge>(normalGepCGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<NormalGepCGEdge>(gepCGEdge));
    ASSERT_EQ(llvm::dyn_cast<NormalGepCGEdge>(gepCGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<GepCGEdge>(variantGepCGEdge));
    ASSERT_NE(llvm::dyn_cast<GepCGEdge>(variantGepCGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<VariantGepCGEdge>(gepCGEdge));
    ASSERT_EQ(llvm::dyn_cast<VariantGepCGEdge>(gepCGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<ICFGEdge>(intraCFGEdge));
    ASSERT_NE(llvm::dyn_cast<ICFGEdge>(intraCFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<IntraCFGEdge>(iCFGEdge));
    ASSERT_EQ(llvm::dyn_cast<IntraCFGEdge>(iCFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<ICFGEdge>(callCFGEdge));
    ASSERT_NE(llvm::dyn_cast<ICFGEdge>(callCFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<CallCFGEdge>(iCFGEdge));
    ASSERT_EQ(llvm::dyn_cast<CallCFGEdge>(iCFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<ICFGEdge>(retCFGEdge));
    ASSERT_NE(llvm::dyn_cast<ICFGEdge>(retCFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<RetCFGEdge>(iCFGEdge));
    ASSERT_EQ(llvm::dyn_cast<RetCFGEdge>(iCFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<PAGEdge>(copyPE));
    ASSERT_NE(llvm::dyn_cast<PAGEdge>(copyPE), nullptr);
    ASSERT_FALSE(llvm::isa<CopyPE>(pAGEdge));
    ASSERT_EQ(llvm::dyn_cast<CopyPE>(pAGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<PAGEdge>(cmpPE));
    ASSERT_NE(llvm::dyn_cast<PAGEdge>(cmpPE), nullptr);
    ASSERT_FALSE(llvm::isa<CmpPE>(pAGEdge));
    ASSERT_EQ(llvm::dyn_cast<CmpPE>(pAGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<PAGEdge>(binaryOPPE));
    ASSERT_NE(llvm::dyn_cast<PAGEdge>(binaryOPPE), nullptr);
    ASSERT_FALSE(llvm::isa<BinaryOPPE>(pAGEdge));
    ASSERT_EQ(llvm::dyn_cast<BinaryOPPE>(pAGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<PAGEdge>(unaryOPPE));
    ASSERT_NE(llvm::dyn_cast<PAGEdge>(unaryOPPE), nullptr);
    ASSERT_FALSE(llvm::isa<UnaryOPPE>(pAGEdge));
    ASSERT_EQ(llvm::dyn_cast<UnaryOPPE>(pAGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<PAGEdge>(storePE));
    ASSERT_NE(llvm::dyn_cast<PAGEdge>(storePE), nullptr);
    ASSERT_FALSE(llvm::isa<StorePE>(pAGEdge));
    ASSERT_EQ(llvm::dyn_cast<StorePE>(pAGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<PAGEdge>(loadPE));
    ASSERT_NE(llvm::dyn_cast<PAGEdge>(loadPE), nullptr);
    ASSERT_FALSE(llvm::isa<LoadPE>(pAGEdge));
    ASSERT_EQ(llvm::dyn_cast<LoadPE>(pAGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<PAGEdge>(gepPE));
    ASSERT_NE(llvm::dyn_cast<PAGEdge>(gepPE), nullptr);
    ASSERT_FALSE(llvm::isa<GepPE>(pAGEdge));
    ASSERT_EQ(llvm::dyn_cast<GepPE>(pAGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<GepPE>(normalGepPE));
    ASSERT_NE(llvm::dyn_cast<GepPE>(normalGepPE), nullptr);
    ASSERT_FALSE(llvm::isa<NormalGepPE>(gepPE));
    ASSERT_EQ(llvm::dyn_cast<NormalGepPE>(gepPE), nullptr);
    ASSERT_TRUE(llvm::isa<GepPE>(variantGepPE));
    ASSERT_NE(llvm::dyn_cast<GepPE>(variantGepPE), nullptr);
    ASSERT_FALSE(llvm::isa<VariantGepPE>(gepPE));
    ASSERT_EQ(llvm::dyn_cast<VariantGepPE>(gepPE), nullptr);
    ASSERT_TRUE(llvm::isa<PAGEdge>(callPE));
    ASSERT_NE(llvm::dyn_cast<PAGEdge>(callPE), nullptr);
    ASSERT_FALSE(llvm::isa<CallPE>(pAGEdge));
    ASSERT_EQ(llvm::dyn_cast<CallPE>(pAGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<CallPE>(tDForkPE));
    ASSERT_NE(llvm::dyn_cast<CallPE>(tDForkPE), nullptr);
    ASSERT_FALSE(llvm::isa<TDForkPE>(callPE));
    ASSERT_EQ(llvm::dyn_cast<TDForkPE>(callPE), nullptr);
    ASSERT_TRUE(llvm::isa<PAGEdge>(retPE));
    ASSERT_NE(llvm::dyn_cast<PAGEdge>(retPE), nullptr);
    ASSERT_FALSE(llvm::isa<RetPE>(pAGEdge));
    ASSERT_EQ(llvm::dyn_cast<RetPE>(pAGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<RetPE>(tDJoinPE));
    ASSERT_NE(llvm::dyn_cast<RetPE>(tDJoinPE), nullptr);
    ASSERT_FALSE(llvm::isa<TDJoinPE>(retPE));
    ASSERT_EQ(llvm::dyn_cast<TDJoinPE>(retPE), nullptr);
    ASSERT_TRUE(llvm::isa<VFGEdge>(directSVFGEdge));
    ASSERT_NE(llvm::dyn_cast<VFGEdge>(directSVFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<DirectSVFGEdge>(vFGEdge));
    ASSERT_EQ(llvm::dyn_cast<DirectSVFGEdge>(vFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<DirectSVFGEdge>(intraDirSVFGEdge));
    ASSERT_NE(llvm::dyn_cast<DirectSVFGEdge>(intraDirSVFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<IntraDirSVFGEdge>(directSVFGEdge));
    ASSERT_EQ(llvm::dyn_cast<IntraDirSVFGEdge>(directSVFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<DirectSVFGEdge>(callDirSVFGEdge));
    ASSERT_NE(llvm::dyn_cast<DirectSVFGEdge>(callDirSVFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<CallDirSVFGEdge>(directSVFGEdge));
    ASSERT_EQ(llvm::dyn_cast<CallDirSVFGEdge>(directSVFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<DirectSVFGEdge>(retDirSVFGEdge));
    ASSERT_NE(llvm::dyn_cast<DirectSVFGEdge>(retDirSVFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<RetDirSVFGEdge>(directSVFGEdge));
    ASSERT_EQ(llvm::dyn_cast<RetDirSVFGEdge>(directSVFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<VFGEdge>(indirectSVFGEdge));
    ASSERT_NE(llvm::dyn_cast<VFGEdge>(indirectSVFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<IndirectSVFGEdge>(vFGEdge));
    ASSERT_EQ(llvm::dyn_cast<IndirectSVFGEdge>(vFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<IndirectSVFGEdge>(intraIndSVFGEdge));
    ASSERT_NE(llvm::dyn_cast<IndirectSVFGEdge>(intraIndSVFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<IntraIndSVFGEdge>(indirectSVFGEdge));
    ASSERT_EQ(llvm::dyn_cast<IntraIndSVFGEdge>(indirectSVFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<IndirectSVFGEdge>(callIndSVFGEdge));
    ASSERT_NE(llvm::dyn_cast<IndirectSVFGEdge>(callIndSVFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<CallIndSVFGEdge>(indirectSVFGEdge));
    ASSERT_EQ(llvm::dyn_cast<CallIndSVFGEdge>(indirectSVFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<IndirectSVFGEdge>(retIndSVFGEdge));
    ASSERT_NE(llvm::dyn_cast<IndirectSVFGEdge>(retIndSVFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<RetIndSVFGEdge>(indirectSVFGEdge));
    ASSERT_EQ(llvm::dyn_cast<RetIndSVFGEdge>(indirectSVFGEdge), nullptr);
    ASSERT_TRUE(llvm::isa<IndirectSVFGEdge>(threadMHPIndSVFGEdge));
    ASSERT_NE(llvm::dyn_cast<IndirectSVFGEdge>(threadMHPIndSVFGEdge), nullptr);
    ASSERT_FALSE(llvm::isa<ThreadMHPIndSVFGEdge>(indirectSVFGEdge));
    ASSERT_EQ(llvm::dyn_cast<ThreadMHPIndSVFGEdge>(indirectSVFGEdge), nullptr);
    // END OF cast testing


